#!/usr/bin/env python

import argparse
import logging
import os
import shutil
import signal
import subprocess
import sys

import buildcat
import buildcat.queue

parser = argparse.ArgumentParser(description="Command line client for Buildcat: the portable, lightweight render farm.")
parser.add_argument("--debug", action="store_true", help="Verbose logging output.")
subparsers = parser.add_subparsers(title="commands (choose one)", dest="command")

#subparser = subparsers.add_parser("dashboard", help="Start a buildcat dashboard server.")
#subparser = subparsers.add_parser("houdini", help="Submit a SideFX Houdini render job.")
subparser = subparsers.add_parser("install", help="Install buildcat integrations.")
#subparser = subparsers.add_parser("modo", help="Submit a Foundry Modo render job.")

subparser = subparsers.add_parser("ping", help="Ping a buildcat worker.")
subparser.add_argument("--host", default="127.0.0.1", help="Server address.  Default: %(default)s")
subparser.add_argument("queue", default="default", nargs="?", help="Server queue to ping.  Default: %(default)s")

subparser = subparsers.add_parser("server", help="Start a buildcat server.")
subparser.add_argument("--bind", default="127.0.0.1", help="Server address.  Default: %(default)s")

subparser = subparsers.add_parser("worker", help="Start a buildcat worker.")
subparser.add_argument("--host", default="127.0.0.1", help="Server address.  Default: %(default)s")
subparser.add_argument("queues", default=["default"], nargs="*", help="Server queues to handle.  Default: %(default)s")

arguments = parser.parse_args()

if arguments.command is None:
    parser.print_help()

logging.basicConfig(level=logging.DEBUG if arguments.debug else logging.INFO)
log = logging.getLogger()
log.name = os.path.basename(sys.argv[0])

# Install integration resources
if arguments.command == "install":
    buildcat_dir = os.path.dirname(buildcat.__file__)
    integrations_dir = os.path.join(buildcat_dir, "integrations")
    target_dir = os.getcwd()

    log.info("Copying files from {}".format(integrations_dir))
    for dirpath, dirnames, filenames in os.walk(integrations_dir):
        for filename in filenames:
            relative_path = os.path.join(os.path.basename(dirpath), filename)
            log.info("Copying {}".format(relative_path))
            if not os.path.exists(os.path.basename(dirpath)):
                os.makedirs(os.path.basename(dirpath))
            shutil.copy2(os.path.join(dirpath, filename), relative_path)
    log.info("Installation complete.")

# Ping a worker
if arguments.command == "ping":
    queue = buildcat.queue.Queue(queue=arguments.queue, host=arguments.host)
    job = queue.submit("buildcat.test.ping")
    print(job.wait())

# Start a server
if arguments.command == "server":
    command = ["redis-server", "--bind", arguments.bind]
    try:
        process = subprocess.Popen(command)
        process.wait()
    except KeyboardInterrupt:
        #process.send_signal(signal.SIGINT)
        process.wait()

# Start a worker
if arguments.command == "worker":
    address = "redis://{}".format(arguments.host)
    command = ["rq", "worker", "-w", "buildcat.worker.Worker", "-u", address] + arguments.queues
    try:
        process = subprocess.Popen(command)
        process.wait()
    except KeyboardInterrupt:
        process.send_signal(signal.SIGINT)
        process.wait()
